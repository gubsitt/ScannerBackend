const { sql, poolPromise } = require('../config/dbConfig');

exports.updatePickupStatus = async (req, res) => {
  const { saleOrderNo, index } = req.body;
  console.log('üì• [updatePickupStatus] ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤:', { saleOrderNo, index });

  try {
    const pool = await poolPromise;

    console.log('üîÑ [updatePickupStatus] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï F_Pickup = 1 ‡∏ó‡∏µ‡πà Detail...');
    await pool.request()
      .input('saleOrderNo', sql.VarChar, saleOrderNo)
      .input('index', sql.Int, index)
      .query(`
        UPDATE Trans_PickingCheckDetail
        SET F_Pickup = 1
        WHERE F_SaleOrderNo = @saleOrderNo AND F_Index = @index
      `);

    console.log('üîç [updatePickupStatus] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠...');
    const result = await pool.request()
      .input('saleOrderNo', sql.VarChar, saleOrderNo)
      .query(`
        SELECT COUNT(*) AS Remaining
        FROM Trans_PickingCheckDetail
        WHERE F_SaleOrderNo = @saleOrderNo AND ISNULL(F_Pickup, 0) = 0
      `);

    const remaining = result.recordset[0].Remaining;
    const isCompleted = remaining === 0;
    console.log(`üì¶ [updatePickupStatus] Remaining: ${remaining}, isCompleted: ${isCompleted}`);

    if (isCompleted) {
      console.log('‚úÖ [updatePickupStatus] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Head ‡πÉ‡∏´‡πâ F_Pickup = 1');
      await pool.request()
        .input('saleOrderNo', sql.VarChar, saleOrderNo)
        .query(`
          UPDATE Trans_PickingCheckHead
          SET F_Pickup = 1
          WHERE F_SaleOrderNo = @saleOrderNo
        `);
    }

    res.status(200).json({
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ F_Pickup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      headUpdated: isCompleted,
      remaining: remaining,
      isCompleted: isCompleted
    });
    console.log('‚úÖ [updatePickupStatus] ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö:', {
      headUpdated: isCompleted,
      remaining: remaining,
      isCompleted: isCompleted
    });
  } catch (err) {
    console.error('üí• [updatePickupStatus] Error:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' });
  }
};


exports.cancelPickupStatus = async (req, res) => {
  const { saleOrderNo, index } = req.body;
  console.log('üì• [cancelPickupStatus] ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤:', { saleOrderNo, index });

  try {
    const pool = await poolPromise;

    console.log('üîÑ [cancelPickupStatus] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï F_Pickup = 0 ‡∏ó‡∏µ‡πà Detail...');
    await pool.request()
      .input('saleOrderNo', sql.VarChar, saleOrderNo)
      .input('index', sql.Int, index)
      .query(`
        UPDATE Trans_PickingCheckDetail
        SET F_Pickup = 0
        WHERE F_SaleOrderNo = @saleOrderNo AND F_Index = @index
      `);

    console.log('üîç [cancelPickupStatus] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠...');
    const result = await pool.request()
      .input('saleOrderNo', sql.VarChar, saleOrderNo)
      .query(`
        SELECT COUNT(*) AS Remaining
        FROM Trans_PickingCheckDetail
        WHERE F_SaleOrderNo = @saleOrderNo AND ISNULL(F_Pickup, 0) = 0
      `);

    const remaining = result.recordset[0].Remaining;
    const isCompleted = remaining === 0;
    console.log(`üì¶ [cancelPickupStatus] Remaining: ${remaining}, isCompleted: ${isCompleted}`);

    if (!isCompleted) {
      console.log('üîÑ [cancelPickupStatus] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Head ‡πÉ‡∏´‡πâ F_Pickup = 0');
      await pool.request()
        .input('saleOrderNo', sql.VarChar, saleOrderNo)
        .query(`
          UPDATE Trans_PickingCheckHead
          SET F_Pickup = 0
          WHERE F_SaleOrderNo = @saleOrderNo
        `);
    }

    res.status(200).json({
      message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ F_Pickup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      headUpdated: !isCompleted,
      remaining: remaining,
      isCompleted: isCompleted
    });
    console.log('‚úÖ [cancelPickupStatus] ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö:', {
      headUpdated: !isCompleted,
      remaining: remaining,
      isCompleted: isCompleted
    });
  } catch (err) {
    console.error('üí• [cancelPickupStatus] Error:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' });
  }
};